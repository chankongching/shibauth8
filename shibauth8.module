<?php

/**
 * @file
 * Contains shibauth8.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Component\Utility\Xss;

/**
 * Implements hook_help().
 */
function shibauth8_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  // @todo - add help.
}

function shibauth8_user_delete(Drupal\Core\Entity\EntityInterface $entity) {
  /** @var \Drupal\Core\Database\Connection $db */
  $db = \Drupal::service('database');
  $db->delete('shib_authmap')
    ->condition('uid', $entity->id())
    ->execute();
}

/**
 * Implements hook_form_alter().
 */
function shibauth8_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  if ($form_id != 'user_login_form') {
    return;
  }

  // Add Shibboleth link to form.
  $form['shibboleth_login_block'] = [
    '#weight' => -10,
    '#markup' => '<div class="shibboleth-login">'
      . shibauth8_get_login_link()
      . '</div>',
  ];

}

/**
 * Get the Shibboleth login link.
 *
 * @return \Drupal\Core\GeneratedLink
 */
function shibauth8_get_login_link() {

  $config = \Drupal::config('shibauth8.shibbolethsettings');
  $url = $config->get('shibboleth_login_handler_url');
  $link_text = $config->get('shibboleth_login_link_text');
  $force_https = $config->get('force_https_on_login');

  $config = \Drupal::config('shibauth8.advancedsettings');
  $redirect = $config->get('url_redirect_login');

  if ($redirect) {
    $redirect = Url::fromUserInput($redirect)->toString();
  }
  else {
    // Not set, use current page.
    $redirect = \Drupal\Core\Url::fromRoute('<current>')->toString();
  }
  $options = [
    'absolute' => TRUE,
    'query' => [
      'destination' => $redirect,
    ],
  ];

  // This is the callback to process the Shib login with the destination for
  // the redirect when done.
  $shib_login_url = \Drupal\Core\Url::fromRoute('shibauth8.login_controller_login', [], $options)->toString();

  $options = [
    'query' => [
      'target' => $shib_login_url,
    ],
  ];

  if ($force_https) {
    $options['https'] = TRUE;
    if (empty($_SERVER['HTTPS'])) {
      $options['absolute'] = TRUE;
    }
  }

  if (parse_url($url, PHP_URL_HOST)) {
    $url = Url::fromUri($url, $options);
  }
  else {
    $url = Url::fromUserInput($url, $options);
  }

  return Link::fromTextAndUrl($link_text, $url)->toString();

}

/**
 * Get the Shibboleth logout link.
 *
 * @return \Drupal\Core\GeneratedLink
 */
function shibauth8_get_logout_link() {
  return Link::createFromRoute(t('Shibboleth Logout'), 'shibauth8.logout_controller_logout')
    ->toString();
}

/**
 * Show debugging messages, if enabled and on correct path(s).
 */
function shibauth8_debug() {

  $config = \Drupal::config('shibauth8.shibbolethsettings');

  if (!$config->get('enable_debug_mode')) {
    // Debugging is off-- bail.
    return;
  }

  $patterns = '';
  if ($path_prefix = $config->get('debug_prefix_path')) {
    $patterns = $path_prefix . "\n" . $path_prefix . '*';
  }

  $current_path = \Drupal::service('path.current')->getPath();
  if ($patterns && !\Drupal::service('path.matcher')->matchPath($current_path, $patterns)) {
    // Path doesn't match-- bail.
    return;
  }

  $tags = ['pre', 'b', 'br'];

  $debug_message = Xss::filter('<b>' . t('Shibboleth debug information') . '</b>', $tags);
  $rendered_message = \Drupal\Core\Render\Markup::create($debug_message);
  drupal_set_message($rendered_message);

  $current_user = \Drupal::currentUser();
  if ($current_user->id()) {
    $user_info = array(
      'uid' => $current_user->id(),
      'name' => $current_user->getAccountName(),
      'mail' => $current_user->getEmail(),
      'roles' => $current_user->getRoles(),
    );
    $debug_message = Xss::filter('<b>Drupal::currentUser():</b><br/><pre>' . print_r($user_info, TRUE) . '</pre>', $tags);
    $rendered_message = \Drupal\Core\Render\Markup::create($debug_message);
    drupal_set_message($rendered_message);
  }

  // Show $_SESSION variables.
  // Work around that drupal_set_message() keeps previous messages in $_SESSION.
  if (!empty($_SESSION)) {
    $session_copy = $_SESSION;
  }
  else {
    $session_copy = [];
  }
  if (isset($session_copy['messages'])) {
    unset($session_copy['messages']);
  }
  $debug_message = Xss::filter('<b>$_SESSION:</b><br/><pre>' . print_r($session_copy, TRUE) . '</pre>', $tags);
  unset($session_copy);
  $rendered_message = \Drupal\Core\Render\Markup::create($debug_message);
  drupal_set_message($rendered_message);

  // Show $_SERVER variables.
  $debug_message = Xss::filter('<b>$_SERVER:</b><br/><pre>' . print_r($_SERVER, TRUE) . '</pre>', $tags);
  $rendered_message = \Drupal\Core\Render\Markup::create($debug_message);
  drupal_set_message($rendered_message);

  // Show config settings.
  $settings = $config->getRawData();
  $adv_config = \Drupal::config('shibauth8.advancedsettings');
  $settings += $adv_config->getRawData();
  ksort($settings);
  $debug_message = Xss::filter('<b>' . t('Module configuration') . ':</b><br/><pre>' . print_r($settings, TRUE) . '</pre>', $tags);
  $rendered_message = \Drupal\Core\Render\Markup::create($debug_message);
  drupal_set_message($rendered_message);

}
